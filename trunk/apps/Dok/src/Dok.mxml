<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   title="Dok"
					   usePreloader="false">
	<s:layout>
		<s:VerticalLayout gap="10" />
	</s:layout>
	<fx:Style source="theme/style.css" />
	<fx:Declarations>
		<s:ArrayCollection id="classesProvider" filterFunction="classFilterer" collectionChange="selectAfterFilter(lstClasses)" />
		<fx:String id="htmlCSS"><![CDATA[
			* {
				font-size:11px;
			}
			html {
				color: #D3D5DD;
				padding: 10px;
			}
			code, pre {
				background:#541c27;
			}
			pre {
				padding:4px;
			}
		]]></fx:String>
	</fx:Declarations>
	<s:applicationComplete>
		<![CDATA[
		var td:TabData;
		var ac:ArrayCollection;
		var nc:NavigatorContent;
		var lst:List;
		for (var i:int=0; i<tabLabels.length; i++) {
			ac=new ArrayCollection();
			ac.filterFunction=detailFilterer;
			nc=new NavigatorContent();
			nc.label=tabLabels[i];
			nc.percentWidth=nc.percentHeight=100;
			lst=new List();
			lst.percentWidth=lst.percentHeight=100;
			lst.dataProvider=ac;
			lst.minHeight=0;
			lst.addEventListener(IndexChangeEvent.CHANGE, updateDetails);
			lst.itemRenderer=new ClassFactory(PropRenderer);
			ac.addEventListener(CollectionEvent.COLLECTION_CHANGE, function(e:Event):void {
				selectAfterFilter(e.target);
			});
			//
			nc.addElement(lst);
			navigator.addElement(nc);
			//
			td=new TabData(ac, nc, lst);
			tabs.push(td);
		}
		if (SO.hasItem('allClasses')) {
			classesProvider.source=SO.getItem('allClasses');
		} else {
			handleLoadLogic(allClassesURL, parseClasses);
		}
		inheritanceBar.addEventListener(MouseEvent.CLICK, onInheritance);
		//
		_sorter=new Sort();
		_sorter.fields=[new SortField('label', true)];
		//
		tabs[PROPS].ac.sort=_sorter;
		tabs[METHODS].ac.sort=_sorter;
		//
		// Gestion de l'auto-update
		var appUpdater:ApplicationUpdaterUI=new ApplicationUpdaterUI();
		appUpdater.updateURL='http://toki-woki.net/p/Dok/version.xml';
		appUpdater.isCheckForUpdateVisible=false;
		appUpdater.addEventListener(UpdateEvent.INITIALIZED, function(e:UpdateEvent):void {
			appUpdater.checkNow();
		});
		appUpdater.initialize();
	]]></s:applicationComplete>
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import com.adobe.crypto.MD5;
			import com.adobe.utils.StringUtil;
			
			import data.TabData;
			
			import flash.utils.getTimer;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.CollectionEvent;
			
			import net.tw.util.SO;
			import net.tw.util.air.App;
			import net.tw.util.air.HTMLFixer;
			
			import prompt.InfoPrompt;
			
			import renderer.FirstInheritanceButtonRenderer;
			import renderer.InheritanceButtonRenderer;
			import renderer.PropRenderer;
			
			import spark.components.Button;
			import spark.components.DataRenderer;
			import spark.components.NavigatorContent;
			import spark.events.IndexChangeEvent;
			//
			protected const allClassesURL:String='http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/all-classes.html';
			protected var _hf:HTMLFixer=new HTMLFixer();
			//
			protected var _loadedURL:String;
			protected var _xmlParser:Function;
			protected var _sorter:Sort;
			protected var _infoPrompt:InfoPrompt;
			//
			public const PROPS:uint=0;
			public const METHODS:uint=1;
			public const EVENTS:uint=2;
			public const CONSTANTS:uint=3;
			public const STYLES:uint=4;
			public const SKIN_PARTS:uint=5;
			public const SKIN_STATES:uint=6;
			//
			public const tabLabels:Array=['Properties', 'Methods', 'Events', 'Constants', 'Styles', 'Skin Parts', 'Skin States'];
			protected var tabs:Vector.<TabData>=new Vector.<TabData>();
			//
			protected function handleLoadLogic(url:String, xmlParser:Function):void {
				_xmlParser=xmlParser;
				_loadedURL=url;
				status='Loading '+(lstClasses.selectedItem ? lstClasses.selectedItem.label : 'classes')+' (only happens once)...';
				_hf.htmlLoader.addEventListener(Event.COMPLETE, onHTMLLoaded);
				_hf.htmlLoader.load(new URLRequest(url));
			}
			//
			protected function onHTMLLoaded(e:Event=null):void {
				try {
					var xml:XML=_hf.getXML();
					_xmlParser(xml);
				} catch (er:Error) {
					trace('outch', er.message);
					trace(_hf.getFixedHTML());
				}
				status=null;
			}
			protected function parseClasses(classesXML:XML):void {
				classesProvider.removeAll();
				//
				var s:String;
				var lbl:String;
				var isInterface:Boolean;
				var isAIR:Boolean;
				//
				var urlPrefix:String=allClassesURL;
				var urlAR:Array=urlPrefix.split('/');
				urlAR.pop();
				urlPrefix=urlAR.join('/');
				var href:String;
				//
				var td:XML;
				for each (td in classesXML..td) {
					if (String(td..i.text())!='') {
						lbl=td..i.text();
						isInterface=true;
					} else {
						lbl=td..a.text();
						isInterface=false
					}
					isAIR=String(td..img.@src)!='';
					//href=String(td..a.@href).split("'")[1];
					href=String(td..a.@onclick).split("'")[1];
					classesProvider.addItem({
						label:lbl,
						href:urlPrefix+'/'+href,
						/*title:String(td..a.@title),*/
						isInterface:isInterface,
						isAIR:isAIR,
						pack:String(td..a.@title).replace('.'+lbl, '')
					});
				}
				SO.setItem('allClasses', classesProvider.toArray());
			}
			protected function filterer(ti:TextInput, item:Object):Boolean {
				if (ti.text=='') return true;
				var filter:String=ti.text;
				var name:String=item.label;
				if (!name) return false;
				if (name.toLowerCase().indexOf(filter.toLowerCase())==0) return true;
				var nameWords:Array=name.split(/([A-Z])/);
				var filterWords:Array=filter.split(/([A-Z])/);
				if (filterWords.length>nameWords.length) return false;
				for (var i:int=0; i<filterWords.length; i++) {
					if (filterWords[i]!='' && nameWords[i].indexOf(filterWords[i])!=0) return false;
				}
				return true;
			}
			protected function classFilterer(item:Object):Boolean {
				//lstClasses.selectedItem=null;
				if (!cbShowAIR.selected && item.isAIR) return false;
				return filterer(tiClassFilter, item);
			}
			protected function detailFilterer(item:Object):Boolean {
				var lst:List;
				for (var i:int=0; i<tabs.length; i++) {
					lst=tabs[i].lst;
					//if (lst) lst.selectedItem=null;
				}
				//
				if (!cbShowInheritedDetails.selected && item.isInherited) return false;
				if (!cbShowProtected.selected && item.isProtected) return false;
				//
				return filterer(tiDetailsFilter, item);
			}
			protected function loadClassDetails():void {
				_selectionDict[lstClasses]=lstClasses.selectedItem;
				var i:int;
				html.htmlLoader.loadString('');
				for (i=0; i<tabs.length; i++) {
					tabs[i].ac.removeAll();
				}
				inheritanceBar.dataProvider=null;
				ddSubClasses.dataProvider=null;
				ddSubClasses.visible=false;
				//
				if (SO.hasItem('classDetails-'+MD5.hash(lstClasses.selectedItem.href))) {
					var o:Object=SO.getItem('classDetails-'+MD5.hash(lstClasses.selectedItem.href));
					for (i=0; i<tabs.length; i++) {
						tabs[i].ac.source=o['dp'+i].concat();
					}
					inheritanceBar.dataProvider=o['dpInheritance'];
					ddSubClasses.dataProvider=o['dpSubClasses'];
					//
					afterClassDetailsDisplayed();
					return;
				}
				handleLoadLogic(lstClasses.selectedItem.href, parseClassDetails);
			}
			protected var _classXML:XML;
			protected function parseClassDetails(xml:XML):void {
				_classXML=xml;
				//
				addDetailItems(xml..table.(attribute('id')=='summaryTableProperty')..tr, tabs[PROPS].ac);
				addDetailItems(xml..table.(attribute('id')=='summaryTableProtectedProperty')..tr, tabs[PROPS].ac, true);
				//
				addDetailItems(xml..table.(attribute('id')=='summaryTableMethod')..tr, tabs[METHODS].ac);
				addDetailItems(xml..table.(attribute('id')=='summaryTableProtectedMethod')..tr, tabs[METHODS].ac, true);
				//
				addDetailItems(xml..table.(attribute('id')=='summaryTableEvent')..tr, tabs[EVENTS].ac);
				//
				addDetailItems(xml..table.(attribute('id')=='summaryTableConstant')..tr, tabs[CONSTANTS].ac);
				//
				addDetailItems(xml..table.(attribute('id')=='summaryTableStyle')..tr, tabs[STYLES].ac);
				//
				addDetailItems(xml..table.(attribute('id')=='summaryTableSkinPart')..tr, tabs[SKIN_PARTS].ac);
				//
				addDetailItems(xml..table.(attribute('id')=='summaryTableSkinState')..tr, tabs[SKIN_STATES].ac);
				//
				var inheritanceLink:XML;
				var ar:Array=[];
				for each (inheritanceLink in xml..td.(attribute('class')=='inheritanceList').a) {
					ar.push({label:String(inheritanceLink.text()), href:String(inheritanceLink.@href)});
				}
				ar.reverse();
				ar.push({label:lstClasses.selectedItem.label});
				inheritanceBar.dataProvider=new ArrayCollection(ar);
				//
				var subClassesTD:XMLList=xml..td.(text()=='Subclasses');
				ar=[];
				if (subClassesTD.length()>0) {
					for each(inheritanceLink in subClassesTD[0].parent()..a) {
						ar.push({label:String(inheritanceLink.text()), href:String(inheritanceLink.@href)});
					}
				}
				ddSubClasses.dataProvider=new ArrayCollection(ar);
				//
				var o:Object={};
				for (var i:int=0; i<tabs.length; i++) {
					o['dp'+i]=tabs[i].ac.toArray();
				}
				o['dpInheritance']=inheritanceBar.dataProvider;
				o['dpSubClasses']=ddSubClasses.dataProvider;
				SO.setItem('classDetails-'+MD5.hash(_loadedURL), o);
				//
				afterClassDetailsDisplayed();
			}
			protected function afterClassDetailsDisplayed():void {
				callLater(function():void {
					inheritanceScroller.horizontalScrollBar.value=inheritanceScroller.horizontalScrollBar.maximum;
					ddSubClasses.visible=ddSubClasses.includeInLayout=ddSubClasses.dataProvider.length>0;
					//
					if (tabs[navigator.selectedIndex].lst.dataProvider.length>0) { 
						//tabs[navigator.selectedIndex].lst.selectedIndex=0;
						updateDetails();
					}
				});
				var s:String="Subclasses";
				if (ddSubClasses.dataProvider.length>0 && ddSubClasses.dataProvider.getItemAt(0).label!=s) ddSubClasses.dataProvider.addItemAt({label:s}, 0);
			}
			protected function addDetailItems(nodes:XMLList, to:ArrayCollection, itemsAreProtected:Boolean=false):void {
				var node:XML;
				var link:XML;
				var td:XML;
				var item:Object;
				var inheritanceLink:XMLList;
				var addItem:Boolean;
				var atts:XMLList;
				var anchor:XML;
				var signatureLinks:XMLList;
				for each (node in nodes) {
					addItem=false;
					item={isProtected:itemsAreProtected, richDescr:''};
					signatureLinks=node..*.(attribute('class')=='signatureLink');
					for each (link in signatureLinks) {
						addItem=true;
						//
						inheritanceLink=node..td.(attribute('class')=='summaryTableOwnerCol').a;
						item.isInherited=inheritanceLink.length()>0;
						//
						item.descr=stripTags(XMLList(node..*.(String(attribute('class')).indexOf('summaryTableDescription')>-1))).toString();
						//
						if (to==tabs[SKIN_PARTS].ac) {
							if (link.name()=='span') {
								item.label=String(link.text());
							} else {
								if (item.isInherited && !item.label) item.label=String(link.text());
								item.descr=link.text()+". "+item.descr;
							}
						} else {
							item.label=String(link.text());
						}
						if (item.isInherited) {
							item.inheritedFrom=String(inheritanceLink.text());
							item.inheritedFromURL=String(inheritanceLink.@href);
						}
						item.anchor=String(link.@href).substr(1);
						item.href=lstClasses.selectedItem.href+'#'+item.anchor;
					}
					atts=_classXML..a.(String(attribute('name'))==item.anchor);
					if (atts.length()==1) {
						anchor=atts[0];
						var tg:XML=anchor.parent().children()[anchor.childIndex()+2];
						if (tg.@['class']=='detailBody') {
							item.richDescr=tg.toXMLString();
						} else {
							tg=anchor.parent().children()[anchor.childIndex()+3];
							if (tg) item.richDescr=tg.toXMLString();
						}
					}
					item.richDescr=cleanRichDescr(item.richDescr);
					if (addItem) to.addItem(item);
				}
			}
			protected function cleanRichDescr(s:String):String {
				s=s.replace(/(<br\/>\s*)+/g, '<br/>');
				s=s.replace(/(<p\/>\s*)+/g, '');
				s=stripOpenCloseTag(s, 'a');
				return s;
			}
			protected function stripOpenCloseTag(s:String, tag:String):String {
				return s.replace(new RegExp('<\\/?'+tag+'(.*?)>', 'gs'), '');
			}
			protected function stripTags(s:String):String {
				return StringUtil.trim(s.replace(/<(.*?)>/gs, '')).replace(/\s+/g, ' ');
			}
			protected function updateDetailsFilters():void {
				for (var i:int=0; i<tabs.length; i++) {
					tabs[i].ac.refresh();
				}
			}
			protected function updateDetails(e:Event=null):void {
				var tg:List;
				var lst:List;
				for (var i:int=0; i<tabs.length; i++) {
					lst=tabs[i].lst;
					if (navigator.selectedChild==tabs[i].nc/* && lst.selectedItem*/) {
						if (lst.dataProvider.length>0 && !lst.selectedItem) lst.selectedIndex=0;
						tg=lst;
					}
				}
				var s:String='';
				if (tg && tg.selectedItem) {
					s=tg.selectedItem.richDescr;
					if (s=='') s=tg.selectedItem.descr;
					_selectionDict[tg]=tg.selectedItem;
				}
				html.htmlLoader.loadString('<html><head><style type="text/css">'+htmlCSS+'</style></head><body>'+s+'</body></html>');
			}
			protected function onInheritance(e:MouseEvent):void {
				if (e.target is Button) {
					var tg:DataRenderer=DataRenderer(e.target.owner);
					selectClassByHREF(tg.data.href);
				}
			}
			protected function onSubClassPick(e:IndexChangeEvent):void {
				if (ddSubClasses.selectedIndex==0) return; 
				selectClassByHREF(ddSubClasses.selectedItem.href);
			}
			protected function selectClassByHREF(href:String):void {
				var ref:String='/'+String(href).replace(/\.\.\//g, '');
				var o:Object;
				tiClassFilter.text='';
				classesProvider.refresh();
				for (var i:int=0; i<classesProvider.length; i++) {
					o=classesProvider.getItemAt(i);
					if (String(o.href).indexOf(ref)!=-1) {
						tiClassFilter.text=o.label;
						classesProvider.refresh();
						lstClasses.selectedItem=o;
						loadClassDetails();
						return;
					}
				}
			}
			protected function pickInheritanceButtonRenderer(item:Object):IFactory {
				return inheritanceBar.numChildren==0 ? new ClassFactory(FirstInheritanceButtonRenderer) : new ClassFactory(InheritanceButtonRenderer);
			}
			protected var _selectionDict:Dictionary=new Dictionary();
			protected function selectAfterFilter(tg:*):void {
				var lst:List;
				if (tg is List) {
					lst=tg;
				} else if (tg is ArrayCollection) {
					var ac:ArrayCollection=tg;
					for (var i:int=0; i<tabs.length; i++) {
						if (tabs[i].ac==ac) {
							lst=tabs[i].lst;
							break;
						}
					}
				}
				if (_selectionDict[lst]) {
					lst.selectedItem=_selectionDict[lst];
					callLater(function():void {
						lst.ensureIndexIsVisible(lst.selectedIndex);
					});
				}
			}
		]]>
	</fx:Script>
	<s:click>
		<![CDATA[
			if(event.target.hasOwnProperty('id') && event.target.id=='statusBarInfoButton') {
				if (!_infoPrompt) {
					_infoPrompt=new InfoPrompt();
					_infoPrompt.open();
					App.centerWindow(_infoPrompt.nativeWindow);
					App.preventClose(_infoPrompt.nativeWindow, nativeWindow);
				}
				_infoPrompt.activate();
			}
		]]>
	</s:click>
	<s:HGroup width="100%" paddingLeft="10" paddingRight="10">
		<s:ButtonBar dataProvider="{navigator}" width="100%" requireSelection="true" id="bBar"/>
	</s:HGroup>
	<s:HGroup width="100%" height="100%" gap="10" paddingLeft="10" paddingRight="10">
		<s:VGroup width="50%" height="100%">
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text="Classes" paddingTop="3" styleName="header" width="100%"/>
				<s:CheckBox label="Show AIR classes" selected="true" id="cbShowAIR" change="classesProvider.refresh()"/>
			</s:HGroup>
			<s:TextInput id="tiClassFilter" creationComplete="tiClassFilter.setFocus()" width="100%" change="classesProvider.refresh();">
				<s:keyDown><![CDATA[
				if (event.keyCode==Keyboard.DOWN) {
					lstClasses.setFocus();
				}
				]]></s:keyDown>
			</s:TextInput>
			<s:List width="100%" height="100%" id="lstClasses" dataProvider="{classesProvider}"
					change="loadClassDetails()" itemRenderer="renderer.ClassRenderer" />
		</s:VGroup>
		<s:VGroup width="50%" height="100%">
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text="{bBar.selectedItem.label}" paddingTop="3" width="100%" styleName="header"/>
				<s:CheckBox label="Show inherited" selected="true" id="cbShowInheritedDetails" change="updateDetailsFilters()"/>
				<s:CheckBox label="Show protected" selected="true" id="cbShowProtected" change="updateDetailsFilters()"/>
			</s:HGroup>
			<s:TextInput width="100%" id="tiDetailsFilter" change="updateDetailsFilters()">
				<s:keyDown><![CDATA[
					if (event.keyCode==Keyboard.DOWN) {
						List(NavigatorContent(navigator.selectedChild).getElementAt(0)).setFocus();
					}
				]]></s:keyDown>
			</s:TextInput>
			<mx:ViewStack width="100%" height="100%" paddingTop="0" id="navigator" change="updateDetails()" />
		</s:VGroup>
	</s:HGroup>
	<s:SkinnableContainer width="100%" skinClass="theme.skin.DokInheritance">
		<s:Scroller width="100%" id="inheritanceScroller" height="60">
			<s:HGroup paddingLeft="10" paddingTop="10" paddingRight="10" gap="-1">
				<s:DataGroup itemRendererFunction="pickInheritanceButtonRenderer" id="inheritanceBar">
					<s:layout>
						<s:HorizontalLayout gap="-1" />
					</s:layout>
				</s:DataGroup>
				<s:DropDownList id="ddSubClasses" visible="false" change="onSubClassPick(event)" requireSelection="true" />
			</s:HGroup>
		</s:Scroller>
	</s:SkinnableContainer>
	<!--<s:HGroup width="100%" height="100%" paddingLeft="10" paddingRight="10">-->
		<s:SkinnableContainer width="100%" height="100%" skinClass="theme.skin.DokHTMLContainer">
			<mx:HTML width="100%" id="html" height="100%" paintsDefaultBackground="false"/>
		</s:SkinnableContainer>
	<!--</s:HGroup>-->
</s:WindowedApplication>